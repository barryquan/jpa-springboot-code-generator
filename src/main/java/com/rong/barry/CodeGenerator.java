package com.rong.barry;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Properties;
import java.util.stream.Collectors;

import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;

import com.rong.barry.generator.config.CodeGeneratorConfig;
import com.rong.barry.generator.config.ModuleConfig;
import com.rong.barry.generator.db.DataBaseEntityUtils;
import com.rong.barry.generator.ex.CodegenException;
import com.rong.barry.generator.metadata.DefaultEntityInfoParser;
import com.rong.barry.generator.metadata.EntityInfo;
import com.rong.barry.generator.metadata.FieldInfo;
import com.rong.barry.generator.metadata.IEntityParser;
import com.rong.barry.generator.metadata.IdInfo;
import com.rong.barry.generator.render.DefaultRender;
import com.rong.barry.generator.render.IRender;
import com.rong.barry.generator.utils.ReflectUtils;

import lombok.extern.slf4j.Slf4j;

/**
 * 基于jpa的实体自动生成对应的controller、service、repository的代码生成器
 * 
 * @author quansr
 * @date 创建时间：2019年12月13日 下午1:49:54
 * @version 1.0
 */
@Slf4j
public class CodeGenerator {

    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy/MM/dd");

    private static final String SRC_PATH = "src/main/";

    private CodeGeneratorConfig config;

    private Properties properties = new Properties();

    private List<String> moduleList = new LinkedList<>();

    private IEntityParser entityParser;

    private IRender render;

    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        new CodeGenerator("src/main/resources/codegen.properties")
                // .packInclude("com.rong.barry.entity") // 批量加入生成的实体类包名
                // .clazzInclude(me.itlearner.jpacodegen.sample.entity.SampleUser.class) //
                // 加入生成的实体类名
                // .clazzExlude(me.itlearner.jpacodegen.sample.entity.SampleUser.class) //
                // 排除生成的实体类名，通常与packInclude混用，以排除包下的特殊实体类不参与生成代码
                .packSuperClazz("com.rong.barry.base.BaseEntity") // 实体需要继承的父类，用来排除不需要加入到实体的字段
                .registerRender("entity") // 注册实体模板
                .registerRender("form") // 注册dto的模板
                .registerRender("search") // 注册搜索的模板
                .registerRender("repository") // 注册repository的模板
                .registerRender("service") // 注册service的模板
                .registerRender("controller") // 注册控制器的模板
                .generate(); // 开始自动生成
        log.info("thanks you use,code generator sucess");
        log.info("generator code use {} ms", System.currentTimeMillis() - start);
    }

    private CodeGenerator packSuperClazz(String superEntityClass) {
        try {
            config.setSuperEntityClass(Class.forName(superEntityClass));
        } catch (ClassNotFoundException e) {
            log.error("找不到父类对应的class,原因={}", e);
        }
        return this;
    }

    /**
     * 
     * @param configLocation 配置文件地址
     */
    public CodeGenerator(String configLocation) {
        try {
            properties.load(new FileInputStream(new File(configLocation)));

            config = new CodeGeneratorConfig();

            config.setAuthor(properties.getProperty("author", System.getProperty("user.name")));
            config.setComments(properties.getProperty("comments", "code generated by jpa codegen"));
            config.setDate(DATE_TIME_FORMATTER.format(LocalDate.now()));

            config.setFtlPath(properties.getProperty("template.dir", SRC_PATH + "resources/templates/"));
            config.setCover(Boolean.parseBoolean(properties.getProperty("cover", "false")));

            config.setEntityFlag(properties.getProperty("entity.flag", ""));
            config.setBaseProjectPath(properties.getProperty("base.project.path", SRC_PATH + "java"));
            // 实体的主键
            config.setEntityIdClass(properties.getProperty("entity.id.class", "Integer"));
            // 实体的主键包名
            config.setEntityIdPackName(properties.getProperty("entity.id.package.name", ""));
            // 使用使用数据库进行生成
            config.setUseDb(Boolean.parseBoolean(properties.getProperty("db.flag", "false")));
            // 数据库相关的配置
            config.getDbProperties().setDriver(properties.getProperty("db.driver"));
            config.getDbProperties().setJdbcUrl(properties.getProperty("db.url"));
            config.getDbProperties().setPassword(properties.getProperty("db.password"));
            config.getDbProperties().setUser(properties.getProperty("db.user"));
            // custom other params
            Map<String, String> otherParams = new HashMap<>(256);
            for (Object key : properties.keySet()) {
                String keyStr = key.toString();
                if (keyStr.contains(".") && "custom".equals(keyStr.substring(0, keyStr.indexOf(".")))) {
                    otherParams.put(keyStr.substring(keyStr.indexOf(".") + 1).replace(".", "_"),
                            properties.getProperty(keyStr));
                }
            }
            config.setOtherParams(otherParams);

            // 实体解析器
            entityParser = new DefaultEntityInfoParser();

            // 渲染器
            render = new DefaultRender(config);

            log.info("init code generator success.");

        } catch (IOException e) {
            throw new CodegenException("init code generator failed.", e);
        }
    }

    /**
     * 添加包下的所有实体
     *
     * @param packages 包名
     */
    public CodeGenerator packInclude(String... packages) {
        for (String pack : packages) {
            config.getEntityClasses()
                    .addAll(ReflectUtils.getClassListByAnnotation(pack, javax.persistence.Entity.class));
        }
        return this;
    }

    /**
     * 添加实体类，必须由{@link javax.persistence.Entity} 修饰
     *
     * @param classes 实体类
     */
    public CodeGenerator clazzInclude(Class<?>... classes) {
        for (Class<?> clazz : classes) {
            config.getEntityClasses().add(clazz);
        }
        return this;
    }

    /**
     * 排除某些实体
     *
     * @param classes 要排除的实体，通常在{@link #packInclude(String...)}之后使用，排除一些特殊的类
     */
    public CodeGenerator clazzExlude(Class<?>... classes) {
        for (Class<?> clazz : classes) {
            config.getEntityClasses().remove(clazz);
        }
        return this;
    }

    /**
     * 解析模块配置 1、 {module}.class.suffix 为自动生成的java类的后缀<br>
     * 如：dto.class.suffix，则自动生成的Java类如：UserDto 2、
     * 
     * @param module 模块
     * @return 模块配置
     */
    private ModuleConfig parseModuleConfig(String module) {
        ModuleConfig moduleConfig = new ModuleConfig();
        moduleConfig.setClassNameSuffix(properties.getProperty(module + ".class.suffix",
                module.substring(0, 1).toUpperCase().concat(module.substring(1))));
        moduleConfig.setFtlName(properties.getProperty(module + ".ftlName", module + ".ftl"));
        moduleConfig.setFlag(properties.getProperty(module + ".flag", module));

        return moduleConfig;
    }

    public void generate() {
        List<EntityInfo> entityInfos = null;
        if (!CollectionUtils.isEmpty(config.getEntityClasses())) {
            entityInfos = config.getEntityClasses().stream().map(entityParser::parse).filter(Objects::nonNull)
                    .collect(Collectors.toList());
        } else {
            entityInfos = getEntityFromDb();
            entityInfos.forEach(e -> {
                e.setPackageName(config.getEntityFlag());
                IdInfo idInfo = new IdInfo();
                idInfo.setClassName(config.getEntityIdClass());
                idInfo.setPackageName(config.getEntityIdPackName());
                e.setId(idInfo);
            });
        }

        if (!CollectionUtils.isEmpty(entityInfos)) {
            log.info("find {} entity classes, now start generate code.", entityInfos.size());

            entityInfos.forEach(entityInfo -> moduleList
                    .forEach(module -> render.render(entityInfo, module, config.getBaseProjectPath())));
        } else {
            log.warn("find none entity class, please check your entity package is true.");
        }
    }

    /**
     * 从数据库中获取实体的信息
     * 
     * @return
     */
    private List<EntityInfo> getEntityFromDb() {
        List<String> superFieldList;
        if (config.getSuperEntityClass() != null) {
            List<FieldInfo> fieldInfos = entityParser.parseField(config.getSuperEntityClass());
            superFieldList = fieldInfos.stream().filter(a -> StringUtils.hasText(a.getName())).map(FieldInfo::getName)
                    .collect(Collectors.toList());
        } else {
            superFieldList = new ArrayList<>();
        }
        return DataBaseEntityUtils.getEntityFromDb(config.getDbProperties(), superFieldList);
    }

    /**
     * 注册渲染组件
     *
     * @param module 模块名
     * @return 代码生成器本身
     */
    public CodeGenerator registerRender(String module) {
        ModuleConfig moduleConfig = parseModuleConfig(module);
        config.getModuleConfigMap().put(module, moduleConfig);
        moduleList.add(module);
        return this;
    }
}
