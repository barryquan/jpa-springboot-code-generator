package ${packageName};

import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import com.github.barry.akali.base.dto.BaseSearchDto;
import com.github.barry.akali.base.BaseService;
import com.github.barry.akali.base.utils.PageReqDto;
import com.github.barry.akali.base.utils.SearchFilter;
import ${entity.packageName}.${entity.className};
import ${lastRenderResponse.dto.packageName}.${lastRenderResponse.dto.className};
import ${lastRenderResponse.response.packageName}.${lastRenderResponse.response.className};
import ${lastRenderResponse.search.packageName}.${lastRenderResponse.search.className};

import lombok.extern.slf4j.Slf4j;

/**
 * service for ${entity.className} generated by jpa-codegen
 * ${entity.comment}
 *
 * @author ${author}
 * @since ${date}.
 */
@Slf4j
@Service
@Transactional(readOnly = true)
public class ${className} extends BaseService<${entity.className}, ${entity.id.className}> {

    //@Autowired
    //private ${lastRenderResponse.repository.className} ${lastRenderResponse.repository.className?uncap_first};

    /**
     * 创建实体
     *
     * @param ${lastRenderResponse.dto.className?uncap_first} 表单
     * @return 实体对象
     */
    @Transactional(readOnly = false)
    public ${lastRenderResponse.response.className} create(${lastRenderResponse.dto.className} ${lastRenderResponse.dto.className?uncap_first}) {
        ${entity.className} ${entity.className?uncap_first} = new ${entity.className}();
        super.mapper(${entity.className?uncap_first}, ${lastRenderResponse.dto.className?uncap_first});
        ${entity.className?uncap_first} = super.save(${entity.className?uncap_first});
        return super.mapperByClass(${entity.className?uncap_first}, ${lastRenderResponse.response.className}.class);
    }

    /**
     * 删除实体
     * @param id 实体id
     */
    @Override
    @Transactional(readOnly = false)
    public void deleteById(${entity.id.className} id) {
//        super.findById(id).ifPresent(t -> {
//            t.setIsActive(Boolean.FALSE);
//            super.save(t);
//        });
        super.deleteById(id);
    }

    /**
     * 根据主键集合批量删除
     * 
     * @param ids
     */
    @Transactional(readOnly = false)
    public void deleteByIds(List<${entity.id.className}> ids) {
        super.deleteAllById(ids);
    }

    /**
     * 更新实体
     *
     * @param ${lastRenderResponse.dto.className?uncap_first} 表单
     * @param id      实体id
     * @return 实体对象
     */
    @Transactional(readOnly = false)
    public ${lastRenderResponse.response.className} update(${entity.id.className} id, ${lastRenderResponse.dto.className} ${lastRenderResponse.dto.className?uncap_first}) {
        Optional<${entity.className}> ${entity.className?uncap_first}Optional = super.findById(id);
        Assert.isTrue(${entity.className?uncap_first}Optional.isPresent(), "更新失败，原数据不存在");
        ${entity.className} ${entity.className?uncap_first} = ${entity.className?uncap_first}Optional.get();
        super.mapper(${entity.className?uncap_first}, ${lastRenderResponse.dto.className?uncap_first});
        ${entity.className?uncap_first} = super.save(${entity.className?uncap_first});
        return super.mapperByClass(${entity.className?uncap_first}, ${lastRenderResponse.response.className}.class);
    }

    /**
     * 获取一个实体对象
     *
     * @param id 实体id
     * @return 实体对象
     */
    public ${lastRenderResponse.response.className} details(${entity.id.className} id) {
        Optional<${entity.className}> ${entity.className?uncap_first}Optional = super.findById(id);
        Assert.isTrue(${entity.className?uncap_first}Optional.isPresent(), "数据不存在");
        return super.mapperByClass(${entity.className?uncap_first}Optional.get(), ${lastRenderResponse.response.className}.class);
    }

    /**
     * 分页列表
     * 
     * @param searchParams 搜索参数
     * @param pageInfo     分页信息
     * @return 分页列表
     */
    public Page<${lastRenderResponse.response.className}> getPageList(Map<String, Object> searchParams, PageReqDto pageInfo) {
        BaseSearchDto searchDto = super.map2Bean(searchParams, ${entity.className}SearchDto.class);
        List<SearchFilter> searchFilters = searchDto.getSearchFilters();
        log.debug("${entity.className}的分页搜索的条件是={},排序的字段为={}", searchFilters, pageInfo.getSortType());
        return super.getPageData(searchFilters, pageInfo, Direction.DESC, ${lastRenderResponse.response.className}.class);
    }

    /**
     * 根据搜索条件搜索所有符合条件的信息列表
     * 
     * @param searchParams 搜索参数
     * @return 信息列表
     */
    public List<${lastRenderResponse.response.className}> findByParams(Map<String, Object> searchParams, String sortTypes) {
        BaseSearchDto searchDto = super.map2Bean(searchParams, ${entity.className}SearchDto.class);
        log.debug("${entity.className}的不分页搜索的参数是={}", searchDto);
        return super.getListData(searchDto.getSearchFilters(), ${lastRenderResponse.response.className}.class, Direction.DESC,
                sortTypes.split(","));
    }

}